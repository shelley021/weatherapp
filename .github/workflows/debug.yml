jobs:
  build:
    runs-on: Ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: '17'
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install missing libtinfo package
      run: "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\"\
        \ || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n\
        \  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo\
        \ apt-get install -y libtinfo5\nfi"
    - name: Install system dependencies
      run: 'sudo apt-get update -y

        sudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config

        sudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev

        sudo apt-get install -y cmake libffi-dev libssl-dev

        sudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv

        sudo apt-get install -y libnss3-dev libnss3-tools'
    - name: Configure pip mirror
      run: 'pip config set global.index-url https://pypi.org/simple/

        pip config set global.trusted-host pypi.org'
    - name: Install Python dependencies
      run: 'python -m pip install --upgrade pip setuptools

        pip install buildozer==1.5.1 kivy==2.3.1 requests==2.25.1 cython==0.29.36
        certifi

        pip install python-for-android'
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        accept-android-sdk-licenses: true
        cmdline-tools-version: latest
        packages: build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653
    - name: Accept Android SDK Licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
    - name: Download Android NDK with Retry
      run: "NDK_URL=\"https://dl.google.com/android/repository/android-ndk-r25b-linux.zip\"\
        \nNDK_PATH=\"$HOME/android-ndk-r25b.zip\"\nNDK_INSTALL_DIR=\"$HOME/.buildozer/android/platform/android-ndk-r25b\"\
        \nEXPECTED_MD5=\"c7e5b3c4b9e7d8f9a1b2c3d4e5f6a7b\"  # \u66FF\u6362\u4E3A\u5B9E\
        \u9645\u7684 MD5 \u6821\u9A8C\u548C\nMAX_RETRIES=5\nRETRY_DELAY=15\nfor i\
        \ in $(seq 1 $MAX_RETRIES); do\n  echo \"\u5C1D\u8BD5\u4E0B\u8F7D Android\
        \ NDK (\u7B2C $i \u6B21)...\"\n  curl -L -o \"$NDK_PATH\" \"$NDK_URL\" --retry\
        \ 5 --retry-delay 5 --retry-max-time 600 --connect-timeout 60\n  if [ $? -eq\
        \ 0 ]; then\n    # \u8BA1\u7B97\u6587\u4EF6\u7684 MD5 \u6821\u9A8C\u548C\n\
        \    DOWNLOADED_MD5=$(md5sum \"$NDK_PATH\" | awk '{print $1}')\n    if [ \"\
        $DOWNLOADED_MD5\" = \"$EXPECTED_MD5\" ]; then\n      echo \"NDK \u4E0B\u8F7D\
        \u6210\u529F\uFF0CMD5 \u6821\u9A8C\u901A\u8FC7\uFF1A$DOWNLOADED_MD5\"\n  \
        \    break\n    else\n      echo \"NDK \u6587\u4EF6 MD5 \u6821\u9A8C\u5931\
        \u8D25\uFF0C\u9884\u671F\uFF1A$EXPECTED_MD5\uFF0C\u5B9E\u9645\uFF1A$DOWNLOADED_MD5\"\
        \n      rm -f \"$NDK_PATH\"\n    fi\n  fi\n  if [ $i -lt $MAX_RETRIES ]; then\n\
        \    echo \"\u4E0B\u8F7D\u5931\u8D25\uFF0C\u7B49\u5F85 $RETRY_DELAY \u79D2\
        \u540E\u91CD\u8BD5...\"\n    sleep $RETRY_DELAY\n  else\n    echo \"\u4E0B\
        \u8F7D Android NDK \u5931\u8D25\uFF0C\u9000\u51FA...\"\n    exit 1\n  fi\n\
        done\nmkdir -p \"$HOME/.buildozer/android/platform\"\nunzip -q \"$NDK_PATH\"\
        \ -d \"$HOME/.buildozer/android/platform\" || {\n  echo \"\u89E3\u538B NDK\
        \ \u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u6587\u4EF6\u5B8C\u6574\u6027\"\n \
        \ exit 1\n}\nif [ -d \"$NDK_INSTALL_DIR\" ]; then\n  echo \"NDK \u89E3\u538B\
        \u6210\u529F\uFF0C\u8DEF\u5F84\uFF1A$NDK_INSTALL_DIR\"\nelse\n  echo \"NDK\
        \ \u89E3\u538B\u5931\u8D25\uFF0C\u672A\u627E\u5230\u9884\u671F\u76EE\u5F55\
        \uFF1A$NDK_INSTALL_DIR\"\n  exit 1\nfi\nexport ANDROID_NDK_HOME=\"$NDK_INSTALL_DIR\"\
        \necho \"ANDROID_NDK_HOME=$ANDROID_NDK_HOME\" >> $GITHUB_ENV"
    - name: Initialize Buildozer
      run: 'buildozer init

        cat << ''EOF'' > buildozer.spec

        [app]

        title = WeatherApp

        package.name = weatherapp

        package.domain = org.weatherapp

        source.dir = .

        source.include_exts = py,png,jpg,kv,atlas

        version = 0.1

        requirements = python3,kivy==2.3.1,requests==2.25.1,certifi

        android.permissions = INTERNET

        android.api = 34

        android.minapi = 21

        android.ndk = 25b

        android.ndk_path = $ANDROID_NDK_HOME

        android.sdk_path = $ANDROID_HOME

        android.accept_sdk_license = True

        orientation = portrait

        fullscreen = 0

        log_level = 2

        p4a.branch = master

        EOF'
    - name: Prepare python-for-android
      run: 'mkdir -p .buildozer/android/platform

        git clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android

        cd .buildozer/android/platform/python-for-android

        git checkout master'
    - name: Set Custom Temp Directory
      run: 'mkdir -p $HOME/tmp

        echo "TMPDIR=$HOME/tmp" >> $GITHUB_ENV

        echo "TEMP=$HOME/tmp" >> $GITHUB_ENV

        echo "TMP=$HOME/tmp" >> $GITHUB_ENV

        export TMPDIR=$HOME/tmp

        export TEMP=$HOME/tmp

        export TMP=$HOME/tmp'
    - env:
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        P4A_RELEASE_KEYALIAS: ${{ secrets.P4A_RELEASE_KEYALIAS }}
        P4A_RELEASE_KEYALIAS_PASSWD: ${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}
        P4A_RELEASE_KEYSTORE: ${{ secrets.P4A_RELEASE_KEYSTORE }}
        P4A_RELEASE_KEYSTORE_PASSWD: ${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}
      name: Build APK
      run: "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds\
        \ -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE\
        \ -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\n\
        buildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\
        \ || echo \"Build failed but log generated\" >> build.log\nif [ ${PIPESTATUS[0]}\
        \ -ne 0 ]; then\n  cat build.log\n  exit 1\nfi"
    - if: always()
      name: Verify Build Log
      run: "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\
        \n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found\
        \ in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n \
        \ else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n \
        \ echo \"No build log found\"\n  exit 1\nfi"
    - if: always()
      name: Save Build Log
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: build.log
        retention-days: 1
    - if: success()
      name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: weatherapp-apk
        path: bin/weatherapp-*.apk
        retention-days: 1
    - name: Check Disk Space Before Build
      run: "echo \"Checking disk space before build...\"\ndf -h\ndu -h /tmp -d 1 --no-dereference\
        \ 2>/dev/null || echo \"\u65E0\u6CD5\u68C0\u67E5 /tmp \u76EE\u5F55\"\ndu -h\
        \ $HOME -d 1 --no-dereference 2>/dev/null || echo \"\u65E0\u6CD5\u68C0\u67E5\
        \ $HOME \u76EE\u5F55\"\n"
    - name: Clean Disk Space
      run: 'echo "Cleaning disk space..."

        rm -rf /tmp/* || true

        rm -rf $HOME/.cache || true

        sudo apt-get clean

        docker system prune -a --force

        '
    - name: Initial Trigger Step
      run: echo 'Initial trigger to start a new workflow'
    - name: Check Network Connectivity
      run: "ping -c 4 google.com || echo '\u7F51\u7EDC\u8FDE\u63A5\u5931\u8D25\uFF0C\
        \u8BF7\u68C0\u67E5\u7F51\u7EDC'"
    - name: Check Disk Space After Build
      run: "echo \"Checking disk space after build...\"\ndf -h\ndu -h /tmp -d 1 --no-dereference\
        \ 2>/dev/null || echo \"\u65E0\u6CD5\u68C0\u67E5 /tmp \u76EE\u5F55\"\ndu -h\
        \ $HOME -d 1 --no-dereference 2>/dev/null || echo \"\u65E0\u6CD5\u68C0\u67E5\
        \ $HOME \u76EE\u5F55\""
    - - name: Retry NDK Download with Delay
        run: buildozer android debug || sleep 10 && buildozer android debug
name: WeatherApp CI
'on':
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
permissions:
  contents: write

# AutoDebug: Forced change at 2025-05-13T06:57:08.771013+00:00
