name: WeatherApp CI
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: '17'
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install missing libtinfo package
      run: |
        Ubuntu_version=$(lsb_release -rs)
        if [[ "$Ubuntu_version" == "22.04" || "$Ubuntu_version" == "24.04" ]]; then
          sudo apt-get update -y
          sudo apt-get install -y libtinfo6
        else
          sudo apt-get update -y
          sudo apt-get install -y libtinfo5
        fi
    - name: Install system dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config
        sudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev
        sudo apt-get install -y cmake libffi-dev libssl-dev
        sudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv
        sudo apt-get install -y libnss3-dev libnss3-tools
    - name: Configure pip mirror
      run: |
        pip config set global.index-url https://pypi.org/simple/
        pip config set global.trusted-host pypi.org
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools
        pip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi
        pip install python-for-android
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        accept-android-sdk-licenses: true
        cmdline-tools-version: latest
        packages: build-tools;34.0.0 platform-tools platforms;android-34
    - name: Create symlink for sdkmanager
      run: |
        sudo mkdir -p $ANDROID_HOME/tools/bin
        sudo ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager $ANDROID_HOME/tools/bin/sdkmanager
    - name: Check sdkmanager path
      run: |
        echo "Checking $ANDROID_HOME/tools/bin/sdkmanager"
        ls -l $ANDROID_HOME/tools/bin/sdkmanager
        echo "Checking $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
        ls -l $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager
    - name: Test sdkmanager
      run: $ANDROID_HOME/tools/bin/sdkmanager --version > sdkmanager_version.log 2>&1 || cat sdkmanager_version.log
    - name: Download Android NDK r27c
      run: |
        NDK_URL="https://dl.google.com/android/repository/android-ndk-r27c-linux.zip"
        NDK_PATH="$HOME/android-ndk-r27c.zip"
        NDK_DIRECTORY="$HOME/.buildozer/android/platform/android-ndk-r27c"
        EXPECTED_MD5="52f5ef6a8eea8426c9748fb29bba85cc"
        MAX_RETRIES=5
        RETRY_DELAY=15
        for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i to download Android NDK..."
          curl -L -o "$NDK_PATH" "$NDK_URL" --retry 5 --retry-delay 5 --retry-max-time 600 --connect-timeout 60
          if [ $? -eq 0 ]; then
            DOWNLOADED_MD5=$(md5sum "$NDK_PATH" | awk '{print $1}')
            if [ "$DOWNLOADED_MD5" = "$EXPECTED_MD5" ]; then
              echo "NDK downloaded successfully, MD5 check passed: $DOWNLOADED_MD5"
              break
            else
              echo "NDK MD5 check failed, expected: $EXPECTED_MD5, actual: $DOWNLOADED_MD5"
              rm -f "$NDK_PATH"
            fi
          fi
          if [ $i -lt $MAX_RETRIES ]; then
            echo "Download failed, waiting $RETRY_DELAY seconds before retrying..."
            sleep $RETRY_DELAY
          else
            echo "Failed to download Android NDK after $MAX_RETRIES attempts."
            exit 1
          fi
        done
        mkdir -p "$HOME/.buildozer/android/platform"
        unzip -q "$NDK_PATH" -d "$HOME/.buildozer/android/platform" || {
          echo "Failed to unzip NDK, please check file integrity"
          exit 1
        }
        if [ -d "$NDK_DIRECTORY" ]; then
          echo "NDK unzipped successfully, path: $NDK_DIRECTORY"
        else
          echo "NDK unzip failed, expected directory not found: $NDK_DIRECTORY"
          exit 1
        fi
        export ANDROID_NDK_HOME="$NDK_DIRECTORY"
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
    - name: Initialize Buildozer
      run: |
        touch build.log
        buildozer init
        cat << 'EOF' > buildozer.spec
        [app]
        title = WeatherApp
        package.name = weatherapp
        package.domain = org.weatherpkg
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas
        version = 0.1
        requirements = python3,kivy==2.3.1,requests==2.25.1,certifi
        android.permissions = INTERNET
        android.api = 34
        android.minapi = 21
        android.ndk = 27c
        android.ndk_path = /home/runner/.buildozer/android/platform/android-ndk-r27c
        android.sdk_path = /usr/local/lib/android/sdk
        android.accept_sdk_license = True
        orientation = portrait
        fullscreen = 1
        log_level = 2
        p4a.branch = master
        EOF
    - name: Prepare python-for-android
      run: |
        mkdir -p .buildozer/android/platform
        git clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android
        cd .buildozer/android/platform/python-for-android
        git checkout master
    - name: Pre-Download OpenSSL
      run: |
        OPENSSL_URL="https://www.openssl.org/source/openssl-3.0.15.tar.gz"
        OPENSSL_CACHE="/home/runner/.buildozer/cache"
        mkdir -p $OPENSSL_CACHE
        MAX_RETRIES=3
        RETRY_DELAY=10
        for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i to download OpenSSL..."
          curl -L -o $OPENSSL_CACHE/openssl-3.0.15.tar.gz "$OPENSSL_URL" && break
          echo "Attempt $i failed, waiting $RETRY_DELAY seconds..."
          sleep $RETRY_DELAY
          if [ $i -eq $MAX_RETRIES ]; then
            echo "Failed to download OpenSSL after $MAX_RETRIES attempts."
            exit 1
          fi
        done
        ls -l $OPENSSL_CACHE
    - name: Set Custom Temp Directory
      run: |
        mkdir -p $HOME/tmp
        echo "TMPDIR=$HOME/tmp" >> $GITHUB_ENV
        echo "TEMP=$HOME/tmp" >> $GITHUB_ENV
        echo "TMP=$HOME/tmp" >> $GITHUB_ENV
        export TMPDIR=$HOME/tmp
        export TEMP=$HOME/tmp
        export TMP=$HOME/tmp
    - env:
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        P4A_RELEASE_KEYALIAS: ${{ secrets.P4A_RELEASE_KEYALIAS }}
        P4A_RELEASE_KEYALIAS_PASSWD: ${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}
        P4A_RELEASE_KEYSTORE: ${{ secrets.P4A_RELEASE_KEYSTORE }}
        P4A_RELEASE_KEYSTORE_PASSWD: ${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}
      name: Build APK
      run: |
        export CFLAGS="-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations"
        export CPPFLAGS="-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700"
        export LDFLAGS="-lnsl -lresolv -lgssapi_krb5"
        buildozer android clean
        buildozer -v android debug deploy 2>&1 | tee -a build.log || echo "Build failed but log generated" >> build.log
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          cat build.log
          exit 1
        fi
    - name: Save Build Log
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: build.log
        retention-days: 2
    - if: success()
      name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: weatherapp-apk
        path: bin/weatherapp-*.apk
        retention-days: 2