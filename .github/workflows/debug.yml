name: WeatherApp CI
on:
  push:
    branches:
    - main
    paths-ignore:
      - 'buildlog/build.log'  # 忽略 build.log 文件的更改
  pull_request:
    branches:
    - main
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: '17'
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install missing libtinfo package
      run: |
        Ubuntu_version=$(lsb_release -rs)
        if [[ "$Ubuntu_version" == "22.04" || "$Ubuntu_version" == "24.04" ]]; then
          sudo apt-get update -y
          sudo apt-get install -y libtinfo6
        else
          sudo apt-get update -y
          sudo apt-get install -y libtinfo5
        fi
    - name: Install system dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config
        sudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev
        sudo apt-get install -y cmake libffi-dev libssl-dev
        sudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv
        sudo apt-get install -y libnss3-dev libnss3-tools
        # 以下是新增的依赖，确保 C 编译器可以正常工作
        sudo apt-get install -y gcc g++ make libreadline-dev libsqlite3-dev libbz2-dev liblzma-dev libgdbm-dev libncurses5-dev libncursesw5-dev libexpat-dev
        # 额外添加的依赖，确保编译器和链接器正常工作
        sudo apt-get install -y binutils libc6-dev libgcc1
        # 新增的依赖，基于 GitHub 成功案例
        sudo apt-get install -y libdb-dev libxml2-dev libxslt1-dev tk-dev libuuid1 uuid-dev
        # 添加 libssl-dev 和 libffi-dev 以修复 C 编译器问题
        sudo apt-get install -y libssl-dev libffi-dev
    - name: Check compiler functionality
      run: |
        echo "int main() { return 0; }" > test.c
        gcc test.c -o test
        if [ -f test ]; then
          echo "Compiler is working correctly."
        else
          echo "Compiler failed to create executable."
          exit 1
        fi
    - name: Configure pip mirror
      run: |
        pip config set global.index-url https://pypi.org/simple/
        pip config set global.trusted-host pypi.org
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools
        pip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi
        pip install python-for-android
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        packages: 'platforms;android-34 build-tools;34.0.0'
    - name: Confirm environment
      run: |
        echo "JAVA_HOME=$JAVA_HOME"
        echo "ANDROID_HOME=$ANDROID_HOME"
        echo "PATH=$PATH"
        which java
        java -version
    - name: Test sdkmanager
      run: $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --version > sdkmanager_version.log 2>&1 || cat sdkmanager_version.log
    - name: Create sdkmanager symlink
      run: |
        sudo mkdir -p $ANDROID_HOME/tools/bin
        sudo ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager $ANDROID_HOME/tools/bin/sdkmanager
        ls -l $ANDROID_HOME/tools/bin/sdkmanager
        echo "Symlink created for sdkmanager"
    - name: Download Android NDK r25b
      run: |
        NDK_URL="https://dl.google.com/android/repository/android-ndk-r25b-linux.zip"
        NDK_PATH="$HOME/android-ndk-r25b.zip"
        NDK_DIRECTORY="$HOME/.buildozer/android/platform/android-ndk-r25b"
        EXPECTED_MD5="302f62deb2931a03f91625ec3107dd0b"
        MAX_RETRIES=5
        RETRY_DELAY=15
        for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i to download Android NDK..."
          curl -L -o "$NDK_PATH" "$NDK_URL" --retry 5 --retry-delay 5 --retry-max-time 600 --connect-timeout 60
          if [ $? -eq 0 ]; then
            DOWNLOADED_MD5=$(md5sum "$NDK_PATH" | awk '{print $1}')
            echo "Expected MD5: $EXPECTED_MD5"
            echo "Downloaded MD5: $DOWNLOADED_MD5"
            if [ "$DOWNLOADED_MD5" = "$EXPECTED_MD5" ]; then
              echo "NDK downloaded successfully, MD5 check passed: $DOWNLOADED_MD5"
              break
            else
              echo "NDK MD5 check failed, expected: $EXPECTED_MD5, actual: $DOWNLOADED_MD5"
              rm -f "$NDK_PATH"
            fi
          fi
          if [ $i -lt $MAX_RETRIES ]; then
            echo "Download failed, waiting $RETRY_DELAY seconds before retrying..."
            sleep $RETRY_DELAY
          else
            echo "Failed to download Android NDK after $MAX_RETRIES attempts."
            exit 1
          fi
        done
        mkdir -p "$HOME/.buildozer/android/platform"
        unzip -q "$NDK_PATH" -d "$HOME/.buildozer/android/platform" || {
          echo "Failed to unzip NDK, please check file integrity"
          exit 1
        }
        if [ -d "$NDK_DIRECTORY" ]; then
          echo "NDK unzipped successfully, path: $NDK_DIRECTORY"
        else
          echo "NDK unzip failed, expected directory not found: $NDK_DIRECTORY"
          exit 1
        fi
        export ANDROID_NDK_HOME="$NDK_DIRECTORY"
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
    - name: Initialize Buildozer
      run: |
        touch build.log
        buildozer init
        cat << 'EOF' > buildozer.spec
        [app]
        title = WeatherApp
        package.name = weatherapp
        package.domain = org.weatherpkg
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas
        version = 0.1
        requirements = python3,kivy==2.3.1,requests==2.25.1,certifi
        android.permissions = INTERNET
        android.api = 34
        android.minapi = 21
        android.ndk = 25b
        android.ndk_path = /home/runner/.buildozer/android/platform/android-ndk-r25b
        android.sdk_path = /usr/local/lib/android/sdk
        android.accept_sdk_license = True
        orientation = portrait
        fullscreen = 1
        log_level = 2
        p4a.branch = master
        EOF
    - name: Prepare python-for-android
      run: |
        mkdir -p .buildozer/android/platform
        git clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android
        cd .buildozer/android/platform/python-for-android
        git checkout master
    - name: Pre-Download OpenSSL
      run: |
        OPENSSL_URL="https://www.openssl.org/source/openssl-3.0.15.tar.gz"
        OPENSSL_CACHE="/home/runner/.buildozer/cache"
        mkdir -p $OPENSSL_CACHE
        MAX_RETRIES=3
        RETRY_DELAY=10
        for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i to download OpenSSL..."
          curl -L -o $OPENSSL_CACHE/openssl-3.0.15.tar.gz "$OPENSSL_URL" && break
          echo "Attempt $i failed, waiting $RETRY_DELAY seconds..."
          sleep $RETRY_DELAY
          if [ $i -eq $MAX_RETRIES ]; then
            echo "Failed to download OpenSSL after $MAX_RETRIES attempts."
            exit 1
          fi
        done
        ls -l $OPENSSL_CACHE
    - name: Pre-Download Python 3.10.6 Source
      run: |
        PRIMARY_URL="https://www.python.org/ftp/python/3.10.6/Python-3.10.6.tar.xz"
        FALLBACK_URL="https://mirror.niser.ac.in/python/ftp/python/3.10.6/Python-3.10.6.tar.xz"
        PYTHON_CACHE="/home/runner/.buildozer/cache"
        PYTHON_FILE="$PYTHON_CACHE/Python-3.10.6.tar.xz"
        mkdir -p $PYTHON_CACHE
        MAX_RETRIES=5
        RETRY_DELAY=10
        EXPECTED_SIZE=19600672  # 更新为实际文件大小（19,600,672 字节）
        for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i to download Python 3.10.6 source from primary URL..."
          curl -L -o "$PYTHON_FILE" "$PRIMARY_URL" --retry 5 --retry-delay 10 --retry-max-time 120 --connect-timeout 30
          if [ $? -eq 0 ]; then
            if [ -f "$PYTHON_FILE" ]; then
              DOWNLOADED_SIZE=$(stat -c%s "$PYTHON_FILE")
              echo "Downloaded file size: $DOWNLOADED_SIZE bytes"
              if [ "$DOWNLOADED_SIZE" -eq "$EXPECTED_SIZE" ]; then
                echo "Python 3.10.6 source downloaded successfully from primary URL."
                break
              else
                echo "File size check failed, expected: $EXPECTED_SIZE, actual: $DOWNLOADED_SIZE"
                rm -f "$PYTHON_FILE"
              fi
            fi
          fi
          echo "Primary URL failed, trying fallback URL..."
          curl -L -o "$PYTHON_FILE" "$FALLBACK_URL" --retry 5 --retry-delay 10 --retry-max-time 120 --connect-timeout 30
          if [ $? -eq 0 ]; then
            if [ -f "$PYTHON_FILE" ]; then
              DOWNLOADED_SIZE=$(stat -c%s "$PYTHON_FILE")
              echo "Downloaded file size: $DOWNLOADED_SIZE bytes"
              if [ "$DOWNLOADED_SIZE" -eq "$EXPECTED_SIZE" ]; then
                echo "Python 3.10.6 source downloaded successfully from fallback URL."
                break
              else
                echo "File size check failed, expected: $EXPECTED_SIZE, actual: $DOWNLOADED_SIZE"
                rm -f "$PYTHON_FILE"
              fi
            fi
          fi
          if [ $i -lt $MAX_RETRIES ]; then
            echo "Download failed, waiting $RETRY_DELAY seconds before retrying..."
            sleep $RETRY_DELAY
          else
            echo "Failed to download Python 3.10.6 source after $MAX_RETRIES attempts."
            exit 1
          fi
        done
        ls -l $PYTHON_CACHE
    - name: Set Custom Temp Directory
      run: |
        mkdir -p $HOME/tmp
        echo "TMPDIR=$HOME/tmp" >> $GITHUB_ENV
        echo "TEMP=$HOME/tmp" >> $GITHUB_ENV
        echo "TMP=$HOME/tmp" >> $GITHUB_ENV
        export TMPDIR=$HOME/tmp
        export TEMP=$HOME/tmp
        export TMP=$HOME/tmp
    - env:
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        P4A_RELEASE_KEYALIAS: ${{ secrets.P4A_RELEASE_KEYALIAS }}
        P4A_RELEASE_KEYALIAS_PASSWD: ${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}
        P4A_RELEASE_KEYSTORE: ${{ secrets.P4A_RELEASE_KEYSTORE }}
        P4A_RELEASE_KEYSTORE_PASSWD: ${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}
      name: Build APK
      run: |
        set -o pipefail
        echo "Starting build process..." | tee -a build.log
        export CFLAGS="-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations"
        export CPPFLAGS="-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700"
        export LDFLAGS="-lnsl -lresolv -lgssapi_krb5"
        echo "Environment variables set." | tee -a build.log
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" | tee -a build.log
        buildozer android clean 2>&1 | tee -a build.log
        buildozer -v android debug deploy 2>&1 | tee -a build.log || {
          echo "Build failed. Check build.log for details." | tee -a build.log
          cat build.log
          exit 1
        }
    - name: Check for APK
      run: |
        if [ -f bin/weatherapp-*.apk ]; then
          echo "APK found."
        else
          echo "APK not found."
          exit 1
        fi
    - name: Check disk space
      run: df -h
    - name: Save Build Log
      if: always()  # 无论成功或失败都执行
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: build.log
        retention-days: 2
    - if: success()
      name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: weatherapp-apk
        path: bin/weatherapp-*.apk
        retention-days: 2
    - name: Check build.log existence
      run: |
        if [ -f build.log ]; then
          echo "build.log exists."
          ls -lh build.log
        else
          echo "build.log does not exist."
        fi