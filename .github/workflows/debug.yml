name: WeatherApp CI
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: '11'
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install missing libtinfo package
      run: |
        Ubuntu_version=$(lsb_release -rs)
        if [[ "$Ubuntu_version" == "22.04" || "$Ubuntu_version" == "24.04" ]]; then
          sudo apt-get update -y
          sudo apt-get install -y libtinfo6
        else
          sudo apt-get update -y
          sudo apt-get install -y libtinfo5
        fi
    - name: Install system dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config
        sudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev
        sudo apt-get install -y cmake libffi-dev libssl-dev
        sudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv
        sudo apt-get install -y libnss3-dev libnss3-tools
    - name: Configure pip mirror
      run: |
        pip config set global.index-url https://pypi.org/simple/
        pip config set global.trusted-host pypi.org
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools
        pip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi
        pip install python-for-android
    - name: Set up Android SDK
      run: |
        echo "ANDROID_HOME=/usr/local/lib/android/sdk"
        echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk"
        export ANDROID_HOME=/usr/local/lib/android/sdk
        export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
        sudo mkdir -p $ANDROID_HOME/cmdline-tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9123335_latest.zip -O cmdline-tools.zip
        sudo unzip -q cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
        sudo mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
        sudo chmod +x $ANDROID_HOME/cmdline-tools/latest/bin/* || echo "chmod failed"
        sudo chown -R runner:runner $ANDROID_HOME || echo "chown failed"
        sudo mkdir -p $ANDROID_HOME/tools/bin
        sudo ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager $ANDROID_HOME/tools/bin/sdkmanager
        sudo ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager $ANDROID_HOME/tools/bin/avdmanager
        sudo chown runner:runner $ANDROID_HOME/tools/bin/sdkmanager
        sudo chown runner:runner $ANDROID_HOME/tools/bin/avdmanager
        rm cmdline-tools.zip
        echo "PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools/bin" >> $GITHUB_ENV
        java -version
        env | grep -E 'JAVA|ANDROID|PATH'
        ls -l $ANDROID_HOME/cmdline-tools/latest/bin
        ls -l $ANDROID_HOME/tools/bin
        file $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager
        whoami
        stat $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager
        stat $ANDROID_HOME/tools/bin/sdkmanager
        which sdkmanager
        sudo -u runner sh -x $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --version > sdkmanager_version.log 2>&1 || cat sdkmanager_version.log
    - name: Accept Android SDK Licenses
      run: yes | sudo -u runner sh -x $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > licenses.log 2>&1 || cat licenses.log
    - name: Install Android SDK Platform Tools
      run: |
        echo "ANDROID_HOME=$ANDROID_HOME"
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
        export ANDROID_HOME=/usr/local/lib/android/sdk
        export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
        sudo -u runner sh -x $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME "platform-tools" "build-tools;34.0.0" "platforms;android-34" > platform_tools_install.log 2>&1 || cat platform_tools_install.log
    - name: Download Android NDK with Retry
      run: |
        NDK_URL="https://dl.google.com/android/repository/android-ndk-r27c-linux.zip"
        NDK_PATH="$HOME/android-ndk-r27c.zip"
        NDK_DIRECTORY="$HOME/.buildozer/android/platform/android-ndk-r27c"
        EXPECTED_MD5="52f5ef6a8eea8426c9748fb29bba85cc"
        MAX_RETRIES=5
        RETRY_DELAY=15
        for i in $(seq 1 $MAX_RETRIES); do
          echo "尝试下载 Android NDK (第 $i 次)..."
          curl -L -o "$NDK_PATH" "$NDK_URL" --retry 5 --retry-delay 5 --retry-max-time 600 --connect-timeout 60
          if [ $? -eq 0 ]; then
            DOWNLOADED_MD5=$(md5sum "$NDK_PATH" | awk '{print $1}')
            if [ "$DOWNLOADED_MD5" = "$EXPECTED_MD5" ]; then
              echo "NDK 下载成功，MD5 校验通过：$DOWNLOADED_MD5"
              break
            else
              echo "NDK 文件 MD5 校验失败，预期：$EXPECTED_MD5，实际：$DOWNLOADED_MD5"
              rm -f "$NDK_PATH"
            fi
          fi
          if [ $i -lt $MAX_RETRIES ]; then
            echo "下载失败，等待 $RETRY_DELAY 秒后重试..."
            sleep $RETRY_DELAY
          else
            echo "下载 Android NDK 失败，退出..."
            exit 1
          fi
        done
        mkdir -p "$HOME/.buildozer/android/platform"
        unzip -q "$NDK_PATH" -d "$HOME/.buildozer/android/platform" || {
          echo "解压 NDK 失败，请检查文件完整性"
          exit 1
        }
        if [ -d "$NDK_DIRECTORY" ]; then
          echo "NDK 解压成功，路径：$NDK_DIRECTORY"
        else
          echo "NDK 解压失败，未找到预期目录：$NDK_DIRECTORY"
          exit 1
        fi
        export ANDROID_NDK_HOME="$NDK_DIRECTORY"
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
    - name: Initialize Buildozer
      run: |
        touch build.log
        buildozer init
        cat << 'EOF' > buildozer.spec
        [app]
        title = WeatherApp
        package.name = weatherapp
        package.domain = org.weatherpkg
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas
        version = 0.1
        requirements = python3,kivy==2.3.1,requests==2.25.1,certifi
        android.permissions = INTERNET
        android.api = 34
        android.minapi = 21
        android.ndk = 27c
        android.ndk_path = /home/runner/.buildozer/android/platform/android-ndk-r27c
        android.sdk_path = /usr/local/lib/android/sdk
        android.accept_sdk_license = True
        orientation = portrait
        fullscreen = 1
        log_level = 2
        p4a.branch = master
        EOF
    - name: Prepare python-for-android
      run: |
        mkdir -p .buildozer/android/platform
        git clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android
        cd .buildozer/android/platform/python-for-android
        git checkout master
    - name: Pre-Download OpenSSL
      run: |
        OPENSSL_URL="https://www.openssl.org/source/openssl-3.0.15.tar.gz"
        OPENSSL_CACHE="/home/runner/.buildozer/cache"
        mkdir -p $OPENSSL_CACHE
        MAX_RETRIES=3
        RETRY_DELAY=10
        for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i to download OpenSSL..."
          curl -L -o $OPENSSL_CACHE/openssl-3.0.15.tar.gz $OPENSSL_URL && break
          echo "Attempt $i failed, waiting $RETRY_DELAY seconds..."
          sleep $RETRY_DELAY
          if [ $i -eq $MAX_RETRIES ]; then
            echo "Failed to download OpenSSL after $MAX_RETRIES attempts."
            exit 1
          fi
        done
        ls -l $OPENSSL_CACHE
    - name: Set Custom Temp Directory
      run: |
        mkdir -p $HOME/tmp
        echo "TMPDIR=$HOME/tmp" >> $GITHUB_ENV
        echo "TEMP=$HOME/tmp" >> $GITHUB_ENV
        echo "TMP=$HOME/tmp" >> $GITHUB_ENV
        export TMPDIR=$HOME/tmp
        export TEMP=$HOME/tmp
        export TMP=$HOME/tmp
    - env:
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        P4A_RELEASE_KEYALIAS: ${{ secrets.P4A_RELEASE_KEYALIAS }}
        P4A_RELEASE_KEYALIAS_PASSWD: ${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}
        P4A_RELEASE_KEYSTORE: ${{ secrets.P4A_RELEASE_KEYSTORE }}
        P4A_RELEASE_KEYSTORE_PASSWD: ${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}
        ANDROID_HOME: /usr/local/lib/android/sdk
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      name: Build APK
      run: |
        export CFLAGS="-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations"
        export CPPFLAGS="-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700"
        export LDFLAGS="-lnsl -lresolv -lgssapi_krb5"
        export PATH=$PATH:/usr/local/lib/android/sdk/cmdline-tools/latest/bin:/usr/local/lib/android/sdk/platform-tools:/usr/local/lib/android/sdk/tools/bin
        buildozer android clean
        buildozer -v android debug deploy 2>&1 | tee -a build.log || echo "Build failed but log generated" >> build.log
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          cat build.log
          exit 1
        fi
    - name: Save Build Log
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: build.log
        retention-days: 2
    - if: success()
      name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: weatherapp-apk
        path: bin/weatherapp-*.apk
        retention-days: 2
    - name: Check Disk Space Before Build
      run: |
        echo "Checking disk space before build..."
        df -h
        du -h /tmp -d 1 --no-dereference 2>/dev/null || echo "无法检查 /tmp 目录"
        du -h $HOME -d 1 --no-dereference 2>/dev/null || echo "无法检查 $HOME 目录"
    - name: Clean Disk Space
      run: |
        echo "Cleaning disk space..."
        rm -rf /tmp/* || true
        rm -rf $HOME/.cache || true
        sudo apt-get clean
        docker system prune -a --force
    - name: Initial Trigger Step
      run: echo 'Initial trigger to start a new workflow'
    - name: Check Disk Space After Build
      run: |
        echo "Checking disk space after build..."
        df -h
        du -h /tmp -d 1 --no-dereference 2>/dev/null || echo "无法检查 /tmp 目录"
        du -h $HOME -d 1 --no-dereference 2>/dev/null || echo "无法检查 $HOME 目录"
    - name: Check Network Connectivity
      run: |
        ping -c 4 google.com || echo '网络连接失败，请检查网络'