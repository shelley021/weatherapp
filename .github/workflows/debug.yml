name: WeatherApp CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: temurin

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install missing libtinfo package
        run: |
          Ubuntu_version=$(lsb_release -rs)
          if [[ "$Ubuntu_version" == "22.04" || "$Ubuntu_version" == "24.04" ]]; then
            sudo apt-get update -y
            sudo apt-get install -y libtinfo6
          else
            sudo apt-get update -y
            sudo apt-get install -y libtinfo5
          fi

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config
          sudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev
          sudo apt-get install -y cmake libffi-dev libssl-dev
          sudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv
          sudo apt-get install -y libnss3-dev libnss3-tools

      - name: Configure pip mirror
        run: |
          pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/
          pip config set global.trusted-host mirrors.aliyun.com

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          pip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi
          pip install python-for-android

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: latest
          packages: build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653
          accept-android-sdk-licenses: true

      - name: Initialize Buildozer
        run: |
          buildozer init
          cat << 'EOF' > buildozer.spec
          [app]
          title = WeatherApp
          package.name = weatherapp
          package.domain = org.weatherapp
          source.dir = .
          source.include_exts = py,png,jpg,kv,atlas
          version = 0.1
          requirements = python3,kivy==2.3.1,requests==2.25.1,certifi
          android.permissions = INTERNET
          android.api = 34
          android.minapi = 21
          android.ndk = 25.2.9519653
          android.ndk_path = $ANDROID_NDK_HOME
          android.sdk_path = $ANDROID_HOME
          android.accept_sdk_license = True
          orientation = portrait
          fullscreen = 0
          log_level = 2
          p4a.branch = master
          EOF

      - name: Prepare python-for-android
        run: |
          mkdir -p .buildozer/android/platform
          git clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android
          cd .buildozer/android/platform/python-for-android
          git checkout master

      # 检查磁盘空间（构建前）
      - name: Check Disk Space Before Build
        run: |
          df -h
          du -h /tmp -d 1 || echo '无法检查 /tmp 目录'

      - name: Build APK
        run: |
          export CFLAGS="-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations"
          export CPPFLAGS="-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700"
          export LDFLAGS="-lnsl -lresolv -lgssapi_krb5"
          buildozer android clean
          buildozer -v android debug deploy 2>&1 | tee build.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            cat build.log
            exit 1
          fi
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
          P4A_RELEASE_KEYSTORE: ${{ secrets.P4A_RELEASE_KEYSTORE }}
          P4A_RELEASE_KEYALIAS: ${{ secrets.P4A_RELEASE_KEYALIAS }}
          P4A_RELEASE_KEYSTORE_PASSWD: ${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}
          P4A_RELEASE_KEYALIAS_PASSWD: ${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}

      - name: Verify Build Log
        if: always()
        run: |
          if [ -f build.log ]; then
            echo "Build log exists, checking for errors..."
            if grep -q -E "ERROR:|FAILED" build.log; then
              echo "Errors found in build log:"
              grep -E "ERROR:|FAILED" build.log
              exit 1
            else
              echo "No critical errors found in build log"
            fi
          else
            echo "No build log found"
            exit 1
          fi

      - name: Save Build Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log
          retention-days: 1

      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: weatherapp-apk
          path: bin/weatherapp-*.apk
          if-no-files-found: error
          retention-days: 1

      - name: Retry Android NDK Download
        run: |
          ping -c 4 google.com || echo "网络连接失败，请检查网络"
          for i in {1..3}; do
            echo "尝试下载 Android NDK，第 $i 次"
            buildozer android debug && break
            echo "下载失败，等待 10 秒后重试..."
            sleep 10
          done

      - name: Manually Install Android NDK
        run: |
          wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip
          unzip android-ndk.zip -d $HOME/android-ndk
          echo "export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b" >> $HOME/.bashrc
          echo "export PATH=$ANDROID_NDK:$PATH" >> $HOME/.bashrc
          source $HOME/.bashrc
          buildozer android debug

      - name: Set Download Timeout
        run: export BUILDOCZER_TIMEOUT=600
        env:
          BUILDOCZER_TIMEOUT: 600

      - name: Verify APK Generation
        run: |
          if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then
            echo "APK 未生成，重新构建"
            buildozer android debug
          fi

      - name: Use Cached NDK
        run: buildozer android use_cached_ndk

      - name: Verify Build Success
        run: buildozer android debug || exit 1

      # 检查磁盘空间（构建后）
      - name: Check Disk Space After Build
        if: always()
        run: |
          df -h
          du -h /tmp -d 1 || echo '无法检查 /tmp 目录'

      # 运行 autodebug.main 进行修复
      - name: Run Autodebug for Fixes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        run: |
          pip install requests pyyaml python-dotenv
          python3 -m autodebug.main