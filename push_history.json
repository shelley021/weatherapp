{
  "AutoDebug: Apply fix 'Manually Install Android NDK' (iteration 1)": {
    "timestamp": "2025-05-06T03:59:36.950169+00:00"
  },
  "AutoDebug: Apply fix 'Set Download Timeout' (iteration 1)": {
    "timestamp": "2025-05-06T04:25:09.944413+00:00"
  },
  "AutoDebug: Apply fix 'Verify APK Generation' (iteration 1)": {
    "timestamp": "2025-05-06T04:25:09.956663+00:00"
  },
  "AutoDebug: Apply fix 'Use Cached NDK' (iteration 2)": {
    "timestamp": "2025-05-06T04:25:14.948414+00:00"
  },
  "AutoDebug: Apply fix 'Fix Build Failure' (iteration 2)": {
    "timestamp": "2025-05-06T04:25:14.988551+00:00"
  },
  "AutoDebug: Apply fix 'Fix Build Failure' (iteration 3)": {
    "timestamp": "2025-05-06T04:25:19.972225+00:00"
  },
  "AutoDebug: Apply fix 'Fix Build Failure' (iteration 4)": {
    "timestamp": "2025-05-06T04:25:24.952303+00:00"
  },
  "AutoDebug: Apply fix 'Fix Build Failure' (iteration 5)": {
    "timestamp": "2025-05-06T04:25:30.111958+00:00"
  },
  "AutoDebug: Apply fix 'Fix Build Failure' (iteration 1)": {
    "timestamp": "2025-05-06T05:22:48.646071+00:00"
  },
  "AutoDebug: Push changes after partial fix for run 14850640964 (iteration 1)": {
    "timestamp": "2025-05-06T05:22:48.646943+00:00"
  },
  "AutoDebug: Apply fix 'Force NDK Redownload' (iteration 1)": {
    "timestamp": "2025-05-06T08:11:38.035921+00:00"
  },
  "AutoDebug: Apply fix 'Check Network Connectivity' (iteration 1)": {
    "timestamp": "2025-05-06T08:11:39.741827+00:00"
  },
  "AutoDebug: Push changes after partial fix for run 14854544912 (iteration 1)": {
    "timestamp": "2025-05-06T08:11:56.385549+00:00"
  },
  "AutoDebug: Apply fix 'Set Network Proxy' (iteration 2)": {
    "timestamp": "2025-05-07T07:03:24.349812+00:00",
    "changes": {
      "before": {
        "name": "WeatherApp CI",
        "true": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "timeout-minutes": 30,
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "java-version": "17",
                  "distribution": "temurin"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653",
                  "accept-android-sdk-licenses": true
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}"
                }
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "if-no-files-found": "error",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600",
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                }
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "name": "Check Disk Space After Build",
                "if": "always()",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Run Autodebug for Fixes",
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}"
                },
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              }
            ]
          }
        }
      },
      "after": {
        "name": "WeatherApp CI",
        "true": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "timeout-minutes": 30,
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "java-version": "17",
                  "distribution": "temurin"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653",
                  "accept-android-sdk-licenses": true
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}"
                }
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "if-no-files-found": "error",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600",
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                }
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "name": "Check Disk Space After Build",
                "if": "always()",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Run Autodebug for Fixes",
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}"
                },
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              }
            ]
          }
        }
      },
      "description": "未提供详细修改描述"
    }
  },
  "AutoDebug: Apply fix 'Retry Build' (iteration 2)": {
    "timestamp": "2025-05-07T07:03:26.251315+00:00",
    "changes": {
      "before": {
        "name": "WeatherApp CI",
        "true": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "timeout-minutes": 30,
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "java-version": "17",
                  "distribution": "temurin"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653",
                  "accept-android-sdk-licenses": true
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}"
                }
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "if-no-files-found": "error",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600",
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                }
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "name": "Check Disk Space After Build",
                "if": "always()",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Run Autodebug for Fixes",
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}"
                },
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              }
            ]
          }
        }
      },
      "after": {
        "name": "WeatherApp CI",
        "true": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "timeout-minutes": 30,
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "java-version": "17",
                  "distribution": "temurin"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653",
                  "accept-android-sdk-licenses": true
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}"
                }
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "if-no-files-found": "error",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600",
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                }
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "name": "Check Disk Space After Build",
                "if": "always()",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Run Autodebug for Fixes",
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}"
                },
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              }
            ]
          }
        }
      },
      "description": "未提供详细修改描述"
    }
  },
  "AutoDebug: Apply fix 'Clean Dependency Cache' (iteration 2)": {
    "timestamp": "2025-05-07T07:03:28.152566+00:00",
    "changes": {
      "before": {
        "name": "WeatherApp CI",
        "true": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "timeout-minutes": 30,
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "java-version": "17",
                  "distribution": "temurin"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653",
                  "accept-android-sdk-licenses": true
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}"
                }
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "if-no-files-found": "error",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600",
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                }
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "name": "Check Disk Space After Build",
                "if": "always()",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Run Autodebug for Fixes",
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}"
                },
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              }
            ]
          }
        }
      },
      "after": {
        "name": "WeatherApp CI",
        "true": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "timeout-minutes": 30,
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "java-version": "17",
                  "distribution": "temurin"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653",
                  "accept-android-sdk-licenses": true
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}"
                }
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "if-no-files-found": "error",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600",
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                }
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "name": "Check Disk Space After Build",
                "if": "always()",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Run Autodebug for Fixes",
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}"
                },
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              }
            ]
          }
        }
      },
      "description": "未提供详细修改描述"
    }
  },
  "AutoDebug: Push changes after partial fix for run 14854544912 (iteration 2)": {
    "timestamp": "2025-05-07T07:03:29.319714+00:00",
    "changes": {
      "before": {
        "name": "WeatherApp CI",
        "true": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "timeout-minutes": 30,
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "java-version": "17",
                  "distribution": "temurin"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653",
                  "accept-android-sdk-licenses": true
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}"
                }
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "if-no-files-found": "error",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600",
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                }
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "name": "Check Disk Space After Build",
                "if": "always()",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Run Autodebug for Fixes",
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}"
                },
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              }
            ]
          }
        }
      },
      "after": {
        "name": "WeatherApp CI",
        "true": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "timeout-minutes": 30,
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "java-version": "17",
                  "distribution": "temurin"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653",
                  "accept-android-sdk-licenses": true
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}"
                }
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "if-no-files-found": "error",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600",
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                }
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "name": "Check Disk Space After Build",
                "if": "always()",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Run Autodebug for Fixes",
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}"
                },
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              }
            ]
          }
        }
      },
      "description": "部分修复错误"
    }
  },
  "AutoDebug: Apply fix 'Update Dependencies' (iteration 3)": {
    "timestamp": "2025-05-07T07:03:36.064695+00:00",
    "changes": {
      "before": {
        "name": "WeatherApp CI",
        "true": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "timeout-minutes": 30,
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "java-version": "17",
                  "distribution": "temurin"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653",
                  "accept-android-sdk-licenses": true
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}"
                }
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "if-no-files-found": "error",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600",
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                }
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "name": "Check Disk Space After Build",
                "if": "always()",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Run Autodebug for Fixes",
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}"
                },
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              },
              {
                "name": "Update Dependencies",
                "run": "pip install --upgrade pip setuptools kivy buildozer"
              }
            ]
          }
        }
      },
      "after": {
        "name": "WeatherApp CI",
        "true": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "timeout-minutes": 30,
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "java-version": "17",
                  "distribution": "temurin"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653",
                  "accept-android-sdk-licenses": true
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}"
                }
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "if-no-files-found": "error",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600",
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                }
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "name": "Check Disk Space After Build",
                "if": "always()",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Run Autodebug for Fixes",
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}"
                },
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              },
              {
                "name": "Update Dependencies",
                "run": "pip install --upgrade pip setuptools kivy buildozer"
              }
            ]
          }
        }
      },
      "description": "未提供详细修改描述"
    }
  },
  "AutoDebug: Push changes after partial fix for run 14854544912 (iteration 3)": {
    "timestamp": "2025-05-07T07:03:37.450136+00:00",
    "changes": {
      "before": {
        "name": "WeatherApp CI",
        "true": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "timeout-minutes": 30,
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "java-version": "17",
                  "distribution": "temurin"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653",
                  "accept-android-sdk-licenses": true
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}"
                }
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "if-no-files-found": "error",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600",
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                }
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "name": "Check Disk Space After Build",
                "if": "always()",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Run Autodebug for Fixes",
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}"
                },
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              },
              {
                "name": "Update Dependencies",
                "run": "pip install --upgrade pip setuptools kivy buildozer"
              }
            ]
          }
        }
      },
      "after": {
        "name": "WeatherApp CI",
        "true": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "runs-on": "ubuntu-latest",
            "timeout-minutes": 30,
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "java-version": "17",
                  "distribution": "temurin"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653",
                  "accept-android-sdk-licenses": true
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}"
                }
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "if-no-files-found": "error",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600",
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                }
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "name": "Check Disk Space After Build",
                "if": "always()",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "name": "Run Autodebug for Fixes",
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}"
                },
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              },
              {
                "name": "Update Dependencies",
                "run": "pip install --upgrade pip setuptools kivy buildozer"
              }
            ]
          }
        }
      },
      "description": "部分修复错误"
    }
  },
  "AutoDebug: Initial trigger to start a new workflow": {
    "timestamp": "2025-05-07T08:44:04.057181+00:00",
    "changes": {
      "before": {
        "jobs": {
          "build": {
            "permissions": {
              "contents": "write"
            },
            "runs-on": "ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}"
                },
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n"
              },
              {
                "if": "always()",
                "name": "Verify Build Log",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "if": "always()",
                "name": "Save Build Log",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "if": "success()",
                "name": "Upload APK",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                },
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600"
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "if": "always()",
                "name": "Check Disk Space After Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "env": {
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}",
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                },
                "name": "Run Autodebug for Fixes",
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              },
              {
                "name": "Update Dependencies",
                "run": "pip install --upgrade pip setuptools kivy buildozer"
              },
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ],
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ],
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ],
              {
                "name": "Initial Trigger Step",
                "run": "echo 'Initial trigger to start a new workflow'"
              }
            ],
            "timeout-minutes": 30
          }
        },
        "name": "WeatherApp CI",
        "on": {
          "pull_request": {
            "branches": [
              "main"
            ]
          },
          "push": {
            "branches": [
              "main"
            ]
          }
        },
        "permissions": {
          "contents": "write"
        }
      },
      "after": {
        "jobs": {
          "build": {
            "permissions": {
              "contents": "write"
            },
            "runs-on": "ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}"
                },
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n"
              },
              {
                "if": "always()",
                "name": "Verify Build Log",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "if": "always()",
                "name": "Save Build Log",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "if": "success()",
                "name": "Upload APK",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                },
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600"
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "if": "always()",
                "name": "Check Disk Space After Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "env": {
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}",
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                },
                "name": "Run Autodebug for Fixes",
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              },
              {
                "name": "Update Dependencies",
                "run": "pip install --upgrade pip setuptools kivy buildozer"
              },
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ],
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ],
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ],
              {
                "name": "Initial Trigger Step",
                "run": "echo 'Initial trigger to start a new workflow'"
              }
            ],
            "timeout-minutes": 30
          }
        },
        "name": "WeatherApp CI",
        "on": {
          "pull_request": {
            "branches": [
              "main"
            ]
          },
          "push": {
            "branches": [
              "main"
            ]
          }
        },
        "permissions": {
          "contents": "write"
        }
      },
      "description": "Initial trigger push"
    }
  },
  "AutoDebug: Push changes after partial fix for run 14877511803 (iteration 4)": {
    "timestamp": "2025-05-07T07:36:47.688402+00:00",
    "changes": {
      "before": {
        "name": "WeatherApp CI",
        "true": {
          "pull_request": {
            "branches": [
              "main"
            ]
          },
          "push": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "permissions": {
              "contents": "write"
            },
            "runs-on": "ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}"
                },
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n"
              },
              {
                "if": "always()",
                "name": "Verify Build Log",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "if": "always()",
                "name": "Save Build Log",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "if": "success()",
                "name": "Upload APK",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                },
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600"
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "if": "always()",
                "name": "Check Disk Space After Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "env": {
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}",
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                },
                "name": "Run Autodebug for Fixes",
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              },
              {
                "name": "Update Dependencies",
                "run": "pip install --upgrade pip setuptools kivy buildozer"
              },
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ]
            ],
            "timeout-minutes": 30
          }
        },
        "permissions": {
          "contents": "write"
        }
      },
      "after": {
        "name": "WeatherApp CI",
        "true": {
          "pull_request": {
            "branches": [
              "main"
            ]
          },
          "push": {
            "branches": [
              "main"
            ]
          }
        },
        "jobs": {
          "build": {
            "permissions": {
              "contents": "write"
            },
            "runs-on": "ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}"
                },
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n"
              },
              {
                "if": "always()",
                "name": "Verify Build Log",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "if": "always()",
                "name": "Save Build Log",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "if": "success()",
                "name": "Upload APK",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                },
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600"
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "if": "always()",
                "name": "Check Disk Space After Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "env": {
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}",
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                },
                "name": "Run Autodebug for Fixes",
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              },
              {
                "name": "Update Dependencies",
                "run": "pip install --upgrade pip setuptools kivy buildozer"
              },
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ]
            ],
            "timeout-minutes": 30
          }
        },
        "permissions": {
          "contents": "write"
        }
      },
      "description": "部分修复错误"
    }
  },
  "AutoDebug: Trigger new run (iteration 1)": {
    "timestamp": "2025-05-07T08:47:16.469430+00:00",
    "changes": {
      "before": {
        "jobs": {
          "build": {
            "permissions": {
              "contents": "write"
            },
            "runs-on": "ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}"
                },
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n"
              },
              {
                "if": "always()",
                "name": "Verify Build Log",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "if": "always()",
                "name": "Save Build Log",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "if": "success()",
                "name": "Upload APK",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                },
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600"
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "if": "always()",
                "name": "Check Disk Space After Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "env": {
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}",
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                },
                "name": "Run Autodebug for Fixes",
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              },
              {
                "name": "Update Dependencies",
                "run": "pip install --upgrade pip setuptools kivy buildozer"
              },
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ],
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ],
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ],
              {
                "name": "Initial Trigger Step",
                "run": "echo 'Initial trigger to start a new workflow'"
              }
            ],
            "timeout-minutes": 30
          }
        },
        "name": "WeatherApp CI",
        "on": {
          "pull_request": {
            "branches": [
              "main"
            ]
          },
          "push": {
            "branches": [
              "main"
            ]
          }
        },
        "permissions": {
          "contents": "write"
        }
      },
      "after": {
        "jobs": {
          "build": {
            "permissions": {
              "contents": "write"
            },
            "runs-on": "ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check Disk Space Before Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}"
                },
                "name": "Build APK",
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi\n"
              },
              {
                "if": "always()",
                "name": "Verify Build Log",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "if": "always()",
                "name": "Save Build Log",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "if": "success()",
                "name": "Upload APK",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              },
              {
                "name": "Retry Android NDK Download",
                "run": "ping -c 4 google.com || echo \"网络连接失败，请检查网络\"\nfor i in {1..3}; do\n  echo \"尝试下载 Android NDK，第 $i 次\"\n  buildozer android debug && break\n  echo \"下载失败，等待 10 秒后重试...\"\n  sleep 10\ndone\n"
              },
              {
                "name": "Manually Install Android NDK",
                "run": "wget -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-r23b-linux.zip\nunzip android-ndk.zip -d $HOME/android-ndk\necho \"export ANDROID_NDK=$HOME/android-ndk/android-ndk-r23b\" >> $HOME/.bashrc\necho \"export PATH=$ANDROID_NDK:$PATH\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nbuildozer android debug\n"
              },
              {
                "env": {
                  "BUILDOCZER_TIMEOUT": 600
                },
                "name": "Set Download Timeout",
                "run": "export BUILDOCZER_TIMEOUT=600"
              },
              {
                "name": "Verify APK Generation",
                "run": "if [ ! -f build/outputs/apk/debug/weatherapp.apk ]; then\n  echo \"APK 未生成，重新构建\"\n  buildozer android debug\nfi\n"
              },
              {
                "name": "Use Cached NDK",
                "run": "buildozer android use_cached_ndk"
              },
              {
                "name": "Verify Build Success",
                "run": "buildozer android debug || exit 1"
              },
              {
                "if": "always()",
                "name": "Check Disk Space After Build",
                "run": "df -h\ndu -h /tmp -d 1 || echo '无法检查 /tmp 目录'\n"
              },
              {
                "env": {
                  "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}",
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                },
                "name": "Run Autodebug for Fixes",
                "run": "pip install requests pyyaml python-dotenv\npython3 -m autodebug.main"
              },
              {
                "name": "Fix Permissions",
                "run": "chmod +x ./script.sh  # 根据具体文件调整\n"
              },
              {
                "name": "Clean Disk Space",
                "run": "rm -rf /tmp/* && docker system prune -a --force"
              },
              {
                "name": "Clean Build Cache",
                "run": "rm -rf ~/.buildozer/cache && buildozer android clean"
              },
              {
                "name": "Force NDK Redownload",
                "run": "rm -rf ~/.buildozer/android/platform/android-ndk-* && buildozer android debug"
              },
              {
                "name": "Check Network Connectivity",
                "run": "ping -c 4 google.com || echo '网络连接失败，请检查网络'"
              },
              {
                "name": "Set Network Proxy",
                "run": "export HTTP_PROXY=http://proxy.example.com:8080 && export HTTPS_PROXY=http://proxy.example.com:8080"
              },
              {
                "name": "Retry Build",
                "run": "buildozer android debug || buildozer android debug"
              },
              {
                "name": "Clean Dependency Cache",
                "run": "pip cache purge"
              },
              {
                "name": "Update Dependencies",
                "run": "pip install --upgrade pip setuptools kivy buildozer"
              },
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ],
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ],
              [
                {
                  "name": "Initial Trigger Step",
                  "run": "echo 'Initial trigger to start a new workflow'"
                }
              ],
              {
                "name": "Initial Trigger Step",
                "run": "echo 'Initial trigger to start a new workflow'"
              }
            ],
            "timeout-minutes": 30
          }
        },
        "name": "WeatherApp CI",
        "on": {
          "pull_request": {
            "branches": [
              "main"
            ]
          },
          "push": {
            "branches": [
              "main"
            ]
          }
        },
        "permissions": {
          "contents": "write"
        }
      },
      "description": "Initial trigger push"
    }
  },
  "AutoDebug: Force push complete debug.yml to resolve startup_failure": {
    "timestamp": "2025-05-07T09:42:53.293761+00:00",
    "changes": {
      "before": {
        "name": "WeatherApp CI",
        "on": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "permissions": {
          "contents": "write"
        },
        "jobs": {
          "build": {
            "runs-on": "Ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools"
              },
              {
                "name": "Initial Trigger Step",
                "run": "echo 'Initial trigger to start a new workflow'"
              }
            ]
          }
        }
      },
      "after": {
        "name": "WeatherApp CI",
        "on": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "permissions": {
          "contents": "write"
        },
        "jobs": {
          "build": {
            "runs-on": "Ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools"
              },
              {
                "name": "Initial Trigger Step",
                "run": "echo 'Initial trigger to start a new workflow'"
              }
            ]
          }
        }
      },
      "description": "Initial trigger push"
    }
  },
  "AutoDebug: Force push debug.yml to trigger new workflow": {
    "timestamp": "2025-05-08T03:28:23.924825+00:00",
    "changes": {
      "before": {
        "name": "WeatherApp CI",
        "on": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "permissions": {
          "contents": "write"
        },
        "jobs": {
          "build": {
            "runs-on": "Ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master"
              },
              {
                "name": "Build APK",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}"
                },
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi"
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              },
              {
                "name": "Initial Trigger Step",
                "run": "echo 'Initial trigger to start a new workflow'"
              }
            ]
          }
        }
      },
      "after": {
        "name": "WeatherApp CI",
        "on": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "permissions": {
          "contents": "write"
        },
        "jobs": {
          "build": {
            "runs-on": "Ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master"
              },
              {
                "name": "Build APK",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}"
                },
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi"
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              },
              {
                "name": "Initial Trigger Step",
                "run": "echo 'Initial trigger to start a new workflow'"
              }
            ]
          }
        }
      },
      "description": "Initial trigger push"
    }
  },
  "AutoDebug: Apply DeepSeek API fix for APK generation": {
    "timestamp": "2025-05-08T05:52:07.594206+00:00",
    "changes": {
      "before": {
        "name": "WeatherApp CI",
        "on": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "permissions": {
          "contents": "write"
        },
        "jobs": {
          "build": {
            "runs-on": "Ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check network connectivity",
                "run": "ping -c 4 google.com || echo \"Network connectivity check failed\"\n"
              },
              {
                "name": "Build APK",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}"
                },
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  echo \"First build attempt failed, retrying after cleanup...\"\n  rm -rf ~/.buildozer/cache\n  buildozer -v android debug deploy 2>&1 | tee -a build.log\n  if [ ${PIPESTATUS[0]} -ne 0 ]; then\n    cat build.log\n    exit 1\n  fi\nfi\n"
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              }
            ]
          }
        }
      },
      "after": {
        "name": "WeatherApp CI",
        "on": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "permissions": {
          "contents": "write"
        },
        "jobs": {
          "build": {
            "runs-on": "Ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi\n"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools\n"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com\n"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android\n"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF\n"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master\n"
              },
              {
                "name": "Check network connectivity",
                "run": "ping -c 4 google.com || echo \"Network connectivity check failed\"\n"
              },
              {
                "name": "Build APK",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}"
                },
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  echo \"First build attempt failed, retrying after cleanup...\"\n  rm -rf ~/.buildozer/cache\n  buildozer -v android debug deploy 2>&1 | tee -a build.log\n  if [ ${PIPESTATUS[0]} -ne 0 ]; then\n    cat build.log\n    exit 1\n  fi\nfi\n"
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi\n"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              }
            ]
          }
        }
      },
      "description": "Initial trigger push"
    }
  },
  "AutoDebug: Force push complete debug.yml to resolve startup_failure or APK failure": {
    "timestamp": "2025-05-08T06:44:44.858916+00:00",
    "changes": {
      "before": {
        "name": "WeatherApp CI",
        "on": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "permissions": {
          "contents": "write"
        },
        "jobs": {
          "build": {
            "runs-on": "Ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master"
              },
              {
                "name": "Build APK",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}"
                },
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi"
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              },
              {
                "name": "Initial Trigger Step",
                "run": "echo 'Initial trigger to start a new workflow'"
              }
            ]
          }
        }
      },
      "after": {
        "name": "WeatherApp CI",
        "on": {
          "push": {
            "branches": [
              "main"
            ]
          },
          "pull_request": {
            "branches": [
              "main"
            ]
          }
        },
        "permissions": {
          "contents": "write"
        },
        "jobs": {
          "build": {
            "runs-on": "Ubuntu-latest",
            "steps": [
              {
                "uses": "actions/checkout@v4"
              },
              {
                "name": "Set up JDK 17",
                "uses": "actions/setup-java@v3",
                "with": {
                  "distribution": "temurin",
                  "java-version": "17"
                }
              },
              {
                "name": "Set up Python",
                "uses": "actions/setup-python@v5",
                "with": {
                  "python-version": "3.10"
                }
              },
              {
                "name": "Install missing libtinfo package",
                "run": "Ubuntu_version=$(lsb_release -rs)\nif [[ \"$Ubuntu_version\" == \"22.04\" || \"$Ubuntu_version\" == \"24.04\" ]]; then\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo6\nelse\n  sudo apt-get update -y\n  sudo apt-get install -y libtinfo5\nfi"
              },
              {
                "name": "Install system dependencies",
                "run": "sudo apt-get update -y\nsudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config\nsudo apt-get install -y zlib1g-dev libncurses5-dev libncursesw5-dev\nsudo apt-get install -y cmake libffi-dev libssl-dev\nsudo apt-get install -y libltdl-dev build-essential python3-dev python3-venv\nsudo apt-get install -y libnss3-dev libnss3-tools"
              },
              {
                "name": "Configure pip mirror",
                "run": "pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/\npip config set global.trusted-host mirrors.aliyun.com"
              },
              {
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip setuptools\npip install buildozer==1.5.0 kivy==2.3.1 requests==2.25.1 cython==0.29.36 certifi\npip install python-for-android"
              },
              {
                "name": "Set up Android SDK",
                "uses": "android-actions/setup-android@v3",
                "with": {
                  "accept-android-sdk-licenses": true,
                  "cmdline-tools-version": "latest",
                  "packages": "build-tools;34.0.0 platform-tools platforms;android-34 ndk;25.2.9519653"
                }
              },
              {
                "name": "Initialize Buildozer",
                "run": "buildozer init\ncat << 'EOF' > buildozer.spec\n[app]\ntitle = WeatherApp\npackage.name = weatherapp\npackage.domain = org.weatherapp\nsource.dir = .\nsource.include_exts = py,png,jpg,kv,atlas\nversion = 0.1\nrequirements = python3,kivy==2.3.1,requests==2.25.1,certifi\nandroid.permissions = INTERNET\nandroid.api = 34\nandroid.minapi = 21\nandroid.ndk = 25.2.9519653\nandroid.ndk_path = $ANDROID_NDK_HOME\nandroid.sdk_path = $ANDROID_HOME\nandroid.accept_sdk_license = True\norientation = portrait\nfullscreen = 0\nlog_level = 2\np4a.branch = master\nEOF"
              },
              {
                "name": "Prepare python-for-android",
                "run": "mkdir -p .buildozer/android/platform\ngit clone https://github.com/kivy/python-for-android.git .buildozer/android/platform/python-for-android\ncd .buildozer/android/platform/python-for-android\ngit checkout master"
              },
              {
                "name": "Build APK",
                "env": {
                  "OPENWEATHER_API_KEY": "${{ secrets.OPENWEATHER_API_KEY }}",
                  "P4A_RELEASE_KEYALIAS": "${{ secrets.P4A_RELEASE_KEYALIAS }}",
                  "P4A_RELEASE_KEYALIAS_PASSWD": "${{ secrets.P4A_RELEASE_KEYALIAS_PASSWD }}",
                  "P4A_RELEASE_KEYSTORE": "${{ secrets.P4A_RELEASE_KEYSTORE }}",
                  "P4A_RELEASE_KEYSTORE_PASSWD": "${{ secrets.P4A_RELEASE_KEYSTORE_PASSWD }}"
                },
                "run": "export CFLAGS=\"-Wno-error=implicit-function-declaration -Wno-error=array-bounds -Wno-error=deprecated-declarations\"\nexport CPPFLAGS=\"-D_GNU_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=700\"\nexport LDFLAGS=\"-lnsl -lresolv -lgssapi_krb5\"\nbuildozer android clean\nbuildozer -v android debug deploy 2>&1 | tee build.log\nif [ ${PIPESTATUS[0]} -ne 0 ]; then\n  cat build.log\n  exit 1\nfi"
              },
              {
                "name": "Verify Build Log",
                "if": "always()",
                "run": "if [ -f build.log ]; then\n  echo \"Build log exists, checking for errors...\"\n  if grep -q -E \"ERROR:|FAILED\" build.log; then\n    echo \"Errors found in build log:\"\n    grep -E \"ERROR:|FAILED\" build.log\n    exit 1\n  else\n    echo \"No critical errors found in build log\"\n  fi\nelse\n  echo \"No build log found\"\n  exit 1\nfi"
              },
              {
                "name": "Save Build Log",
                "if": "always()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "name": "build-log",
                  "path": "build.log",
                  "retention-days": 1
                }
              },
              {
                "name": "Upload APK",
                "if": "success()",
                "uses": "actions/upload-artifact@v4",
                "with": {
                  "if-no-files-found": "error",
                  "name": "weatherapp-apk",
                  "path": "bin/weatherapp-*.apk",
                  "retention-days": 1
                }
              },
              {
                "name": "Initial Trigger Step",
                "run": "echo 'Initial trigger to start a new workflow'"
              }
            ]
          }
        }
      },
      "description": "Initial trigger push"
    }
  }
}